name: Deploy Jekyll site with Jupyter conversion

on:
  push:
    branches: [ main, master ]
    paths: 
      - 'notebooks/**/*.ipynb'
      - '_posts/**'
      - '_config.yml'
      - '**/*.md'
      - '**/*.html'
      - 'assets/**'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  convert-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        pip install jupyter nbconvert[webpdf] jupyter-client ipykernel
        pip install matplotlib seaborn pandas numpy scikit-learn plotly

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: Create directories
      run: |
        mkdir -p _posts assets/images/posts

    - name: Check for notebooks
      id: check_notebooks
      run: |
        if [ -d "notebooks" ] && [ -n "$(find notebooks -name '*.ipynb' -type f 2>/dev/null | head -1)" ]; then
          echo "has_notebooks=true" >> $GITHUB_OUTPUT
          echo "📓 Found notebooks to convert"
        else
          echo "has_notebooks=false" >> $GITHUB_OUTPUT
          echo "ℹ️ No notebooks found"
        fi

    - name: Convert notebooks if they exist
      if: steps.check_notebooks.outputs.has_notebooks == 'true'
      run: |
        echo "🔄 Converting Jupyter notebooks to blog posts..."
        
        for notebook in notebooks/*.ipynb; do
          if [ -f "$notebook" ]; then
            echo "📓 Processing: $notebook"
            
            # Extract filename and create slug
            filename=$(basename "$notebook" .ipynb)
            slug=$(echo "$filename" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
            current_date=$(date +"%Y-%m-%d")
            output_name="${current_date}-${slug}"
            
            # Convert notebook to markdown
            jupyter nbconvert \
              --to markdown \
              --output-dir _posts \
              --output "$output_name" \
              "$notebook" \
              --allow-errors || echo "Warning: Conversion failed for $notebook"
            
            post_file="_posts/${output_name}.md"
            
            if [ -f "$post_file" ]; then
              # Create title from filename
              title=$(echo "$filename" | sed 's/_/ /g' | sed 's/-/ /g' | sed 's/\b\w/\U&/g')
              
              # Simple category detection
              category="Technical"
              if grep -qi "machine.*learning\|ml\|model" "$post_file"; then
                category="Machine Learning"
              elif grep -qi "visualization\|plot\|chart" "$post_file"; then
                category="Data Visualization"
              elif grep -qi "web\|api\|fastapi" "$post_file"; then
                category="Web Development"
              fi
              
              # Create temporary file with front matter
              temp_file=$(mktemp)
              
              # Write front matter line by line (avoiding heredoc)
              echo "---" > "$temp_file"
              echo "layout: post" >> "$temp_file"
              echo "title: \"$title\"" >> "$temp_file"
              echo "date: $(date +"%Y-%m-%d %H:%M:%S %z")" >> "$temp_file"
              echo "categories: [$category]" >> "$temp_file"
              echo "tags: [jupyter, notebook, python]" >> "$temp_file"
              echo "author: Gaurav" >> "$temp_file"
              echo "excerpt: \"Analysis and insights from Jupyter notebook\"" >> "$temp_file"
              echo "---" >> "$temp_file"
              echo "" >> "$temp_file"
              echo "<!-- Generated from Jupyter notebook -->" >> "$temp_file"
              echo "" >> "$temp_file"
              
              # Append original content (skip first line if it's a title)
              if head -n1 "$post_file" | grep -q "^#"; then
                tail -n +2 "$post_file" >> "$temp_file"
              else
                cat "$post_file" >> "$temp_file"
              fi
              
              # Replace original file
              mv "$temp_file" "$post_file"
              
              echo "✅ Converted: $notebook → $post_file"
              
              # Handle images if they exist
              images_dir="_posts/${output_name}_files"
              if [ -d "$images_dir" ]; then
                target_dir="assets/images/posts/$output_name"
                mkdir -p "$target_dir"
                
                # Copy image files
                find "$images_dir" -name "*.png" -o -name "*.jpg" -o -name "*.svg" -o -name "*.gif" | while read img; do
                  cp "$img" "$target_dir/"
                  echo "📸 Copied: $(basename "$img")"
                done
                
                # Update image paths in markdown
                sed -i "s|${output_name}_files/|/assets/images/posts/${output_name}/|g" "$post_file"
                
                # Clean up temporary directory
                rm -rf "$images_dir"
              fi
            else
              echo "❌ Failed to create: $post_file"
            fi
          fi
        done

    - name: Create search index
      run: |
        echo "🔍 Creating search index..."
        echo "---" > search.json
        echo "layout: null" >> search.json
        echo "---" >> search.json
        echo "[" >> search.json
        echo "  {% for post in site.posts %}" >> search.json
        echo "    {" >> search.json
        echo "      \"title\"    : {{ post.title | jsonify }}," >> search.json
        echo "      \"category\" : {{ post.categories | first | jsonify }}," >> search.json
        echo "      \"tags\"     : {{ post.tags | join: \", \" | jsonify }}," >> search.json
        echo "      \"url\"      : {{ site.baseurl | append: post.url | jsonify }}," >> search.json
        echo "      \"date\"     : {{ post.date | date: \"%B %d, %Y\" | jsonify }}," >> search.json
        echo "      \"content\"  : {{ post.content | strip_html | strip_newlines | truncate: 300 | jsonify }}" >> search.json
        echo "    } {% unless forloop.last %},{% endunless %}" >> search.json
        echo "  {% endfor %}" >> search.json
        echo "]" >> search.json

    - name: Commit notebook conversions
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        
        git add _posts/ assets/ search.json || true
        
        if ! git diff --staged --quiet; then
          git commit -m "🤖 Convert Jupyter notebooks to blog posts - $(date)"
          git push origin ${{ github.ref_name }}
          echo "✅ Changes committed and pushed"
        else
          echo "ℹ️ No changes to commit"
        fi

    - name: Build Jekyll site
      run: |
        echo "🔨 Building Jekyll site..."
        bundle install
        bundle exec jekyll build --trace
      env:
        JEKYLL_ENV: production

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./_site

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Display deployment info
      run: |
        echo "🚀 Deployment completed successfully!"
        echo "📄 Site URL: ${{ steps.deployment.outputs.page_url }}"
        echo "✅ Your portfolio is live with automated blog posts!"