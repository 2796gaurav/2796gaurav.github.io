name: Deploy Jekyll site with Jupyter conversion

on:
  push:
    branches: [ main, master ]
    paths: 
      - 'notebooks/**/*.ipynb'
      - '_posts/**'
      - '_config.yml'
      - '**/*.md'
      - '**/*.html'
      - 'assets/**'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  convert-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        pip install jupyter nbconvert[webpdf] jupyter-client ipykernel
        pip install matplotlib seaborn pandas numpy scikit-learn plotly
        pip install fastapi sqlalchemy psycopg2-binary python-jose passlib

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: Create directories
      run: |
        mkdir -p _posts assets/images/posts

    - name: Create conversion script
      run: |
        cat > convert_notebooks.py << 'SCRIPT_END'
        #!/usr/bin/env python3
        import os
        import sys
        import subprocess
        from pathlib import Path
        from datetime import datetime
        import re

        def clean_filename(filename):
            """Convert filename to URL-friendly slug"""
            slug = filename.lower()
            slug = re.sub(r'[^a-z0-9]+', '-', slug)
            slug = re.sub(r'^-|-$', '', slug)
            return slug

        def determine_category(content):
            """Determine blog category based on content"""
            content_lower = content.lower()
            if any(term in content_lower for term in ['machine learning', 'ml', 'model', 'sklearn']):
                return 'Machine Learning'
            elif any(term in content_lower for term in ['visualization', 'plot', 'chart', 'matplotlib', 'seaborn']):
                return 'Data Visualization'
            elif any(term in content_lower for term in ['web', 'api', 'fastapi', 'flask']):
                return 'Web Development'
            else:
                return 'Technical'

        def convert_notebook(notebook_path):
            """Convert a single notebook to blog post"""
            print(f"📓 Processing: {notebook_path}")
            
            # Get basic info
            notebook_name = Path(notebook_path).stem
            slug = clean_filename(notebook_name)
            current_date = datetime.now().strftime("%Y-%m-%d")
            output_name = f"{current_date}-{slug}"
            
            # Convert using nbconvert
            cmd = [
                'jupyter', 'nbconvert',
                '--to', 'markdown',
                '--output-dir', '_posts',
                '--output', output_name,
                notebook_path,
                '--TagRemovePreprocessor.enabled=True',
                '--TagRemovePreprocessor.remove_cell_tags=["remove_cell"]',
                '--ExecutePreprocessor.timeout=300',
                '--allow-errors'
            ]
            
            try:
                subprocess.run(cmd, check=True, capture_output=True, text=True)
            except subprocess.CalledProcessError as e:
                print(f"❌ Failed to convert {notebook_path}: {e}")
                return False
            
            # Process the generated markdown file
            post_file = Path(f"_posts/{output_name}.md")
            if not post_file.exists():
                print(f"❌ Output file not created: {post_file}")
                return False
            
            # Read content and determine category
            content = post_file.read_text()
            category = determine_category(content)
            
            # Create title from filename
            title = notebook_name.replace('_', ' ').replace('-', ' ').title()
            
            # Extract excerpt
            lines = content.split('\n')
            excerpt = "Insights from Jupyter notebook analysis"
            for line in lines:
                if line.strip() and not line.startswith('#') and len(line.strip()) > 20:
                    excerpt = line.strip()[:150]
                    break
            
            # Count words for reading time
            word_count = len(content.split())
            read_time = max(1, word_count // 200)
            
            # Create front matter
            front_matter = f"""---
layout: post
title: "{title}"
date: {datetime.now().strftime("%Y-%m-%d %H:%M:%S %z")}
categories: [{category}]
tags: [jupyter, notebook, python, analysis]
author: Gaurav
excerpt: "{excerpt}"
notebook_source: "{notebook_path}"
read_time: "{read_time} min read"
---

"""
            
            # Combine front matter with content
            processed_content = front_matter + "<!-- This post was automatically generated from a Jupyter notebook -->\n\n" + content
            
            # Remove the first heading if it matches the title
            processed_content = re.sub(r'^# .*?\n', '', processed_content, count=1)
            
            # Write the processed file
            post_file.write_text(processed_content)
            print(f"✅ Converted: {notebook_path} → {post_file}")
            
            # Handle images
            images_dir = Path(f"_posts/{output_name}_files")
            if images_dir.exists():
                target_dir = Path(f"assets/images/posts/{output_name}")
                target_dir.mkdir(parents=True, exist_ok=True)
                
                # Copy images
                for img_file in images_dir.rglob("*"):
                    if img_file.is_file() and img_file.suffix.lower() in ['.png', '.jpg', '.jpeg', '.gif', '.svg']:
                        target_file = target_dir / img_file.name
                        target_file.write_bytes(img_file.read_bytes())
                        print(f"📸 Copied: {img_file.name}")
                
                # Update image paths in markdown
                content = post_file.read_text()
                content = content.replace(f"{output_name}_files/", f"/assets/images/posts/{output_name}/")
                post_file.write_text(content)
                
                # Remove temporary images directory
                import shutil
                shutil.rmtree(images_dir)
                print(f"🗑️ Cleaned up: {images_dir}")
            
            return True

        def main():
            notebooks_dir = Path("notebooks")
            
            if not notebooks_dir.exists():
                print("ℹ️ No notebooks directory found")
                return
            
            notebook_files = list(notebooks_dir.glob("*.ipynb"))
            
            if not notebook_files:
                print("ℹ️ No notebook files found in notebooks/ directory")
                return
            
            print(f"🔄 Found {len(notebook_files)} notebook(s) to convert")
            
            success_count = 0
            for notebook in notebook_files:
                if convert_notebook(notebook):
                    success_count += 1
            
            print(f"✅ Successfully converted {success_count}/{len(notebook_files)} notebooks")

        if __name__ == "__main__":
            main()
        SCRIPT_END

    - name: Convert notebooks to blog posts
      run: python convert_notebooks.py

    - name: Create search index
      run: |
        cat > search.json << 'EOF'
        ---
        layout: null
        ---
        [
          {% for post in site.posts %}
            {
              "title"    : {{ post.title | jsonify }},
              "category" : {{ post.categories | first | jsonify }},
              "tags"     : {{ post.tags | join: ", " | jsonify }},
              "url"      : {{ site.baseurl | append: post.url | jsonify }},
              "date"     : {{ post.date | date: "%B %d, %Y" | jsonify }},
              "content"  : {{ post.content | strip_html | strip_newlines | truncate: 300 | jsonify }}
            } {% unless forloop.last %},{% endunless %}
          {% endfor %}
        ]
        EOF

    - name: Commit notebook conversions
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        
        git add _posts/ assets/ search.json || true
        
        if ! git diff --staged --quiet; then
          git commit -m "🤖 Convert Jupyter notebooks to blog posts
          
          Generated: $(date)"
          git push origin ${{ github.ref_name }}
          echo "✅ Changes committed and pushed"
        else
          echo "ℹ️ No changes to commit"
        fi

    - name: Build Jekyll site
      run: |
        echo "🔨 Building Jekyll site..."
        bundle install
        bundle exec jekyll build --trace
      env:
        JEKYLL_ENV: production

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./_site

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Display deployment info
      run: |
        echo "🚀 Deployment completed successfully!"
        echo "📄 Site URL: ${{ steps.deployment.outputs.page_url }}"
        echo "✅ Your portfolio is live!"